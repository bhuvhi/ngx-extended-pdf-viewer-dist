export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"pdf-viewer-application.js","sourceRoot":"","sources":["../../../../../projects/ngx-extended-pdf-viewer/src/lib/options/pdf-viewer-application.ts"],"names":[],"mappings":"","sourcesContent":["import { OptionalContentConfig } from './optional_content_config';\r\nimport { PasswordPrompt } from './password-prompt';\r\nimport { AnnotationStorage, PrintAnnotationStorage } from './pdf-annotation-storage';\r\nimport { IEventBus } from './pdf-event-bus';\r\nimport { PageViewport } from './pdf-page-view-port';\r\nimport { IPDFViewer, PageViewModeType } from './pdf-viewer';\r\nimport { IPDFViewerAppConfig } from './pdf-viewer-app-config';\r\n\r\nexport interface IWebL10n {\r\n  translate(element: HTMLElement | null): Promise<void>;\r\n  get(key: string, args: any, fallbackString: string): string;\r\n}\r\n\r\nexport interface ViewHistory {\r\n  get(name: string, defaultValue?: string): Promise<string>;\r\n}\r\n\r\n/**\r\n * Page text content.\r\n */\r\nexport type TextContent = {\r\n  /**\r\n   * - Array of\r\n   * {@link TextItem } and {@link TextMarkedContent } objects. TextMarkedContent\r\n   * items are included when includeMarkedContent is true.\r\n   */\r\n  items: Array<TextItem | TextMarkedContent>;\r\n};\r\n\r\nexport interface FindController {\r\n  state: any;\r\n  _pageMatches: Array<any>;\r\n  _pageMatchesColor: Array<number>;\r\n  _pageMatchesLength: Array<number>;\r\n  pageViewMode: PageViewModeType;\r\n}\r\n\r\nexport interface Metadata {\r\n  getRaw(): any;\r\n  get(name: any): any;\r\n  getAll(): any;\r\n  has(name: any): any;\r\n}\r\n\r\nexport interface MessageHandler {\r\n  sourceName: any;\r\n  targetName: any;\r\n  comObj: any;\r\n  callbackId: number;\r\n  streamId: number;\r\n  streamSinks: any;\r\n  streamControllers: any;\r\n  callbackCapabilities: any;\r\n  actionHandler: any;\r\n  on(actionName: any, handler: any): void;\r\n  /**\r\n   * Sends a message to the comObj to invoke the action with the supplied data.\r\n   * @param {string} actionName - Action to call.\r\n   * @param {JSON} data - JSON data to send.\r\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\r\n   */\r\n  send(actionName: string, data: JSON, transfers: any[] | undefined): void;\r\n  /**\r\n   * Sends a message to the comObj to invoke the action with the supplied data.\r\n   * Expects that the other side will callback with the response.\r\n   * @param {string} actionName - Action to call.\r\n   * @param {JSON} data - JSON data to send.\r\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\r\n   * @returns {Promise} Promise to be resolved with response data.\r\n   */\r\n  sendWithPromise(actionName: string, data: JSON, transfers: any[] | undefined): Promise<any>;\r\n  /**\r\n   * Sends a message to the comObj to invoke the action with the supplied data.\r\n   * Expect that the other side will callback to signal 'start_complete'.\r\n   * @param {string} actionName - Action to call.\r\n   * @param {JSON} data - JSON data to send.\r\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\r\n   *                 internal queue.\r\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\r\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\r\n   */\r\n  sendWithStream(actionName: string, data: JSON, queueingStrategy: Object, transfers: any[] | undefined): ReadableStream;\r\n\r\n  destroy(): void;\r\n}\r\n\r\nexport interface PDFWorker {\r\n  name: any;\r\n  destroyed: boolean;\r\n  verbosity: number;\r\n\r\n  /**\r\n   * Promise for worker initialization completion.\r\n   * @type {Promise<void>}\r\n   */\r\n  get promise(): Promise<void>;\r\n  /**\r\n   * The current `workerPort`, when it exists.\r\n   * @type {Worker}\r\n   */\r\n  get port(): Worker;\r\n  /**\r\n   * The current MessageHandler-instance.\r\n   * @type {MessageHandler}\r\n   */\r\n  get messageHandler(): MessageHandler;\r\n  _initializeFromPort(port: any): void;\r\n  _initialize(): void;\r\n  _setupFakeWorker(): void;\r\n  /**\r\n   * Destroys the worker instance.\r\n   */\r\n  destroy(): void;\r\n}\r\n\r\n/**\r\n * Document initialization / loading parameters object.\r\n */\r\nexport type DocumentInitParameters = {\r\n  /**\r\n   * - The URL of the PDF.\r\n   */\r\n  url: string | URL | undefined;\r\n  /**\r\n   * - Binary PDF data.\r\n   * Use TypedArrays (Uint8Array) to improve the memory usage. If PDF data is\r\n   * BASE64-encoded, use `atob()` to convert it to a binary string first.\r\n   *\r\n   * NOTE: If TypedArrays are used they will generally be transferred to the\r\n   * worker-thread. This will help reduce main-thread memory usage, however\r\n   * it will take ownership of the TypedArrays.\r\n   */\r\n  data: ArrayBuffer | ArrayBufferView | undefined;\r\n  /**\r\n   * - Basic authentication headers.\r\n   */\r\n  httpHeaders: Object | undefined;\r\n  /**\r\n   * - Indicates whether or not\r\n   * cross-site Access-Control requests should be made using credentials such\r\n   * as cookies or authorization headers. The default is `false`.\r\n   */\r\n  withCredentials: boolean | undefined;\r\n  /**\r\n   * - For decrypting password-protected PDFs.\r\n   */\r\n  password: string | undefined;\r\n  /**\r\n   * - The PDF file length. It's used for progress\r\n   * reports and range requests operations.\r\n   */\r\n  length: number | undefined;\r\n  /**\r\n   * - Allows for using a custom range\r\n   * transport implementation.\r\n   */\r\n  range: any | undefined;\r\n  /**\r\n   * - Specify maximum number of bytes fetched\r\n   * per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE }.\r\n   */\r\n  rangeChunkSize: number | undefined;\r\n  /**\r\n   * - The worker that will be used for loading and\r\n   * parsing the PDF data.\r\n   */\r\n  worker: PDFWorker | undefined;\r\n  /**\r\n   * - Controls the logging level; the constants\r\n   * from {@link VerbosityLevel } should be used.\r\n   */\r\n  verbosity: number | undefined;\r\n  /**\r\n   * - The base URL of the document, used when\r\n   * attempting to recover valid absolute URLs for annotations, and outline\r\n   * items, that (incorrectly) only specify relative URLs.\r\n   */\r\n  docBaseUrl: string | undefined;\r\n  /**\r\n   * - The URL where the predefined Adobe CMaps are\r\n   * located. Include the trailing slash.\r\n   */\r\n  cMapUrl: string | undefined;\r\n  /**\r\n   * - Specifies if the Adobe CMaps are binary\r\n   * packed or not. The default value is `true`.\r\n   */\r\n  cMapPacked: boolean | undefined;\r\n  /**\r\n   * - The factory that will be used when\r\n   * reading built-in CMap files. Providing a custom factory is useful for\r\n   * environments without Fetch API or `XMLHttpRequest` support, such as\r\n   * Node.js. The default value is {DOMCMapReaderFactory}.\r\n   */\r\n  CMapReaderFactory: Object | undefined;\r\n  /**\r\n   * - When `true`, fonts that aren't\r\n   * embedded in the PDF document will fallback to a system font.\r\n   * The default value is `true` in web environments and `false` in Node.js;\r\n   * unless `disableFontFace === true` in which case this defaults to `false`\r\n   * regardless of the environment (to prevent completely broken fonts).\r\n   */\r\n  useSystemFonts: boolean | undefined;\r\n  /**\r\n   * - The URL where the standard font\r\n   * files are located. Include the trailing slash.\r\n   */\r\n  standardFontDataUrl: string | undefined;\r\n  /**\r\n   * - The factory that will be used\r\n   * when reading the standard font files. Providing a custom factory is useful\r\n   * for environments without Fetch API or `XMLHttpRequest` support, such as\r\n   * Node.js. The default value is {DOMStandardFontDataFactory}.\r\n   */\r\n  StandardFontDataFactory: Object | undefined;\r\n  /**\r\n   * - Enable using the Fetch API in the\r\n   * worker-thread when reading CMap and standard font files. When `true`,\r\n   * the `CMapReaderFactory` and `StandardFontDataFactory` options are ignored.\r\n   * The default value is `true` in web environments and `false` in Node.js.\r\n   */\r\n  useWorkerFetch: boolean | undefined;\r\n  /**\r\n   * - Reject certain promises, e.g.\r\n   * `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\r\n   * PDF data cannot be successfully parsed, instead of attempting to recover\r\n   * whatever possible of the data. The default value is `false`.\r\n   */\r\n  stopAtErrors: boolean | undefined;\r\n  /**\r\n   * - The maximum allowed image size in total\r\n   * pixels, i.e. width * height. Images above this value will not be rendered.\r\n   * Use -1 for no limit, which is also the default value.\r\n   */\r\n  maxImageSize: number | undefined;\r\n  /**\r\n   * - Determines if we can evaluate strings\r\n   * as JavaScript. Primarily used to improve performance of font rendering, and\r\n   * when parsing PDF functions. The default value is `true`.\r\n   */\r\n  isEvalSupported: boolean | undefined;\r\n  /**\r\n   * - Determines if we can use\r\n   * `OffscreenCanvas` in the worker. Primarily used to improve performance of\r\n   * image conversion/rendering.\r\n   * The default value is `true` in web environments and `false` in Node.js.\r\n   */\r\n  isOffscreenCanvasSupported: boolean | undefined;\r\n  /**\r\n   * - By default fonts are converted to\r\n   * OpenType fonts and loaded via the Font Loading API or `@font-face` rules.\r\n   * If disabled, fonts will be rendered using a built-in font renderer that\r\n   * constructs the glyphs with primitive path commands.\r\n   * The default value is `false` in web environments and `true` in Node.js.\r\n   */\r\n  disableFontFace: boolean | undefined;\r\n  /**\r\n   * - Include additional properties,\r\n   * which are unused during rendering of PDF documents, when exporting the\r\n   * parsed font data from the worker-thread. This may be useful for debugging\r\n   * purposes (and backwards compatibility), but note that it will lead to\r\n   * increased memory usage. The default value is `false`.\r\n   */\r\n  fontExtraProperties: boolean | undefined;\r\n  /**\r\n   * - Render Xfa forms if any.\r\n   * The default value is `false`.\r\n   */\r\n  enableXfa: boolean | undefined;\r\n  /**\r\n   * - Specify an explicit document\r\n   * context to create elements with and to load resources, such as fonts,\r\n   * into. Defaults to the current document.\r\n   */\r\n  ownerDocument: Document | undefined;\r\n  /**\r\n   * - Disable range request loading of PDF\r\n   * files. When enabled, and if the server supports partial content requests,\r\n   * then the PDF will be fetched in chunks. The default value is `false`.\r\n   */\r\n  disableRange: boolean | undefined;\r\n  /**\r\n   * - Disable streaming of PDF file data.\r\n   * By default PDF.js attempts to load PDF files in chunks. The default value\r\n   * is `false`.\r\n   */\r\n  disableStream: boolean | undefined;\r\n  /**\r\n   * - Disable pre-fetching of PDF file\r\n   * data. When range requests are enabled PDF.js will automatically keep\r\n   * fetching more data even if it isn't needed to display the current page.\r\n   * The default value is `false`.\r\n   *\r\n   * NOTE: It is also necessary to disable streaming, see above, in order for\r\n   * disabling of pre-fetching to work correctly.\r\n   */\r\n  disableAutoFetch: boolean | undefined;\r\n  /**\r\n   * - Enables special hooks for debugging PDF.js\r\n   * (see `web/debugger.js`). The default value is `false`.\r\n   */\r\n  pdfBug: boolean | undefined;\r\n};\r\nexport type OnProgressParameters = {\r\n  /**\r\n   * - Currently loaded number of bytes.\r\n   */\r\n  loaded: number;\r\n  /**\r\n   * - Total number of bytes in the PDF file.\r\n   */\r\n  total: number;\r\n};\r\n\r\n/**\r\n * Page annotation parameters.\r\n */\r\nexport type GetAnnotationsParameters = {\r\n  /**\r\n   * - Determines the annotations that are fetched,\r\n   * can be 'display' (viewable annotations), 'print' (printable annotations),\r\n   * or 'any' (all annotations). The default value is 'display'.\r\n   */\r\n  intent: string | undefined;\r\n};\r\n\r\nexport type TextItem = {\r\n  /**\r\n   * - Text content.\r\n   */\r\n  str: string;\r\n  /**\r\n   * - Text direction: 'ttb', 'ltr' or 'rtl'.\r\n   */\r\n  dir: string;\r\n  /**\r\n   * - Transformation matrix.\r\n   */\r\n  transform: Array<any>;\r\n  /**\r\n   * - Width in device space.\r\n   */\r\n  width: number;\r\n  /**\r\n   * - Height in device space.\r\n   */\r\n  height: number;\r\n  /**\r\n   * - Font name used by PDF.js for converted font.\r\n   */\r\n  fontName: string;\r\n  /**\r\n   * - Indicating if the text content is followed by a\r\n   * line-break.\r\n   */\r\n  hasEOL: boolean;\r\n};\r\n\r\n/**\r\n * Page text marked content part.\r\n */\r\nexport type TextMarkedContent = {\r\n  /**\r\n   * - Either 'beginMarkedContent',\r\n   * 'beginMarkedContentProps', or 'endMarkedContent'.\r\n   */\r\n  type: string;\r\n  /**\r\n   * - The marked content identifier. Only used for type\r\n   * 'beginMarkedContentProps'.\r\n   */\r\n  id: string;\r\n};\r\n\r\n/**\r\n * A PDF document and page is built of many objects. E.g. there are objects for\r\n * fonts, images, rendering code, etc. These objects may get processed inside of\r\n * a worker. This class implements some basic methods to manage these objects.\r\n */\r\ndeclare interface PDFObjects {\r\n  /**\r\n   * If called *without* callback, this returns the data of `objId` but the\r\n   * object needs to be resolved. If it isn't, this method throws.\r\n   *\r\n   * If called *with* a callback, the callback is called with the data of the\r\n   * object once the object is resolved. That means, if you call this method\r\n   * and the object is already resolved, the callback gets called right away.\r\n   *\r\n   * @param {string} objId\r\n   * @param {function} [callback]\r\n   * @returns {any}\r\n   */\r\n  get(objId: string, callback: Function | undefined): any;\r\n  /**\r\n   * @param {string} objId\r\n   * @returns {boolean}\r\n   */\r\n  has(objId: string): boolean;\r\n  /**\r\n   * Resolves the object `objId` with optional `data`.\r\n   *\r\n   * @param {string} objId\r\n   * @param {any} [data]\r\n   */\r\n  resolve(objId: string, data?: any): void;\r\n  clear(): void;\r\n}\r\n\r\nexport type RefProxy = {\r\n  num: number;\r\n  gen: number;\r\n};\r\n\r\n/**\r\n * Page getViewport parameters.\r\n */\r\nexport type GetViewportParameters = {\r\n  /**\r\n   * - The desired scale of the viewport.\r\n   */\r\n  scale: number;\r\n  /**\r\n   * - The desired rotation, in degrees, of\r\n   * the viewport. If omitted it defaults to the page rotation.\r\n   */\r\n  rotation?: number;\r\n  /**\r\n   * - The horizontal, i.e. x-axis, offset.\r\n   * The default value is `0`.\r\n   */\r\n  offsetX?: number;\r\n  /**\r\n   * - The vertical, i.e. y-axis, offset.\r\n   * The default value is `0`.\r\n   */\r\n  offsetY?: number;\r\n  /**\r\n   * - If true, the y-axis will not be\r\n   * flipped. The default value is `false`.\r\n   */\r\n  dontFlip?: boolean;\r\n};\r\n\r\nexport interface PDFDateString {\r\n  /**\r\n   * Convert a PDF date string to a JavaScript `Date` object.\r\n   *\r\n   * The PDF date string format is described in section 7.9.4 of the official\r\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\r\n   * edition) Adobe describes the same format including a trailing apostrophe.\r\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\r\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\r\n   *\r\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\r\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\r\n   * parts of the date string).\r\n   *\r\n   * @param {string} input\r\n   * @returns {Date|null}\r\n   */\r\n  // static toDateObject(input: string): Date | null;\r\n}\r\n\r\n/**\r\n * Page getTextContent parameters.\r\n */\r\nexport type getTextContentParameters = {\r\n  /**\r\n   * - Do not attempt to combine\r\n   * same line {@link TextItem }'s. The default value is `false`.\r\n   */\r\n  disableCombineTextItems: boolean;\r\n  /**\r\n   * - When true include marked\r\n   * content items in the items array of TextContent. The default is `false`.\r\n   */\r\n  includeMarkedContent: boolean | undefined;\r\n};\r\n\r\n/**\r\n * Allows controlling of the rendering tasks.\r\n */\r\nexport interface RenderTask {\r\n  /**\r\n   * Callback for incremental rendering -- a function that will be called\r\n   * each time the rendering is paused.  To continue rendering call the\r\n   * function that is the first argument to the callback.\r\n   * @type {function}\r\n   */\r\n  onContinue: Function;\r\n  /**\r\n   * Promise for rendering task completion.\r\n   * @type {Promise<void>}\r\n   */\r\n  get promise(): Promise<void>;\r\n  /**\r\n   * Cancels the rendering task. If the task is currently rendering it will\r\n   * not be cancelled until graphics pauses with a timeout. The promise that\r\n   * this object extends will be rejected when cancelled.\r\n   *\r\n   * @param {number} [extraDelay]\r\n   */\r\n  cancel(extraDelay: number | undefined): void;\r\n  /**\r\n   * Whether form fields are rendered separately from the main operatorList.\r\n   * @type {boolean}\r\n   */\r\n  get separateAnnots(): boolean;\r\n}\r\n\r\n/**\r\n * Page render parameters.\r\n */\r\nexport type RenderParameters = {\r\n  /**\r\n   * - A 2D context of a DOM Canvas object.\r\n   */\r\n  canvasContext: Object;\r\n  /**\r\n   * - Rendering viewport obtained by calling\r\n   * the `PDFPageProxy.getViewport` method.\r\n   */\r\n  viewport: PageViewport;\r\n  /**\r\n   * - Rendering intent, can be 'display', 'print',\r\n   * or 'any'. The default value is 'display'.\r\n   */\r\n  intent: string | undefined;\r\n  /**\r\n   * Controls which annotations are rendered\r\n   * onto the canvas, for annotations with appearance-data; the values from\r\n   * {@link AnnotationMode } should be used. The following values are supported:\r\n   * - `AnnotationMode.DISABLE`, which disables all annotations.\r\n   * - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\r\n   * it also depends on the `intent`-option, see above).\r\n   * - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\r\n   * interactive form elements (those will be rendered in the display layer).\r\n   * - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\r\n   * (as above) but where interactive form elements are updated with data\r\n   * from the {@link AnnotationStorage }-instance; useful e.g. for printing.\r\n   * The default value is `AnnotationMode.ENABLE`.\r\n   */\r\n  annotationMode: number | undefined;\r\n  /**\r\n   * - Additional transform, applied just\r\n   * before viewport transform.\r\n   */\r\n  transform: any[] | undefined;\r\n  /**\r\n   * - The factory instance that will be used\r\n   * when creating canvases. The default value is {new DOMCanvasFactory()}.\r\n   */\r\n  canvasFactory: Object | undefined;\r\n  /**\r\n   * - Background to use for the canvas.\r\n   * Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\r\n   * <color> value, a `CanvasGradient` object (a linear or radial gradient) or\r\n   * a `CanvasPattern` object (a repetitive image). The default value is\r\n   * 'rgb(255,255,255)'.\r\n   *\r\n   * NOTE: This option may be partially, or completely, ignored when the\r\n   * `pageColors`-option is used.\r\n   */\r\n  background: string | Object | undefined;\r\n  /**\r\n   * - Overwrites background and foreground colors\r\n   * with user defined ones in order to improve readability in high contrast\r\n   * mode.\r\n   */\r\n  pageColors: Object | undefined;\r\n  /**\r\n   * - Map some\r\n   * annotation ids with canvases used to render them.\r\n   */\r\n  annotationCanvasMap: Map<string, HTMLCanvasElement> | undefined;\r\n  printAnnotationStorage: PrintAnnotationStorage | undefined;\r\n\r\n  backgroundColorToReplace: string | undefined; // added by ngx-extended-pdf-viewer\r\n  optionalContentConfigPromise: Promise<unknown> | undefined; // added by ngx-extended-pdf-viewer?\r\n};\r\n\r\n/**\r\n * Structure tree node. The root node will have a role \"Root\".\r\n */\r\nexport type StructTreeNode = {\r\n  /**\r\n   * - Array of\r\n   * {@link StructTreeNode } and {@link StructTreeContent } objects.\r\n   */\r\n  children: Array<StructTreeNode | StructTreeContent>;\r\n  /**\r\n   * - element's role, already mapped if a role map exists\r\n   * in the PDF.\r\n   */\r\n  role: string;\r\n};\r\n/**\r\n * Structure tree content.\r\n */\r\nexport type StructTreeContent = {\r\n  /**\r\n   * - either \"content\" for page and stream structure\r\n   * elements or \"object\" for object references.\r\n   */\r\n  type: string;\r\n  /**\r\n   * - unique id that will map to the text layer.\r\n   */\r\n  id: string;\r\n};\r\n\r\nexport interface PDFPageProxy {\r\n  /** @type {PDFObjects} */\r\n  commonObjs: PDFObjects;\r\n  objs: PDFObjects;\r\n  _bitmaps: Set<any>;\r\n  cleanupAfterRender: boolean;\r\n  pendingCleanup: boolean;\r\n  _intentStates: Map<any, any>;\r\n  destroyed: boolean;\r\n  /**\r\n   * @type {number} Page number of the page. First page is 1.\r\n   */\r\n  get pageNumber(): number;\r\n  /**\r\n   * @type {number} The number of degrees the page is rotated clockwise.\r\n   */\r\n  get rotate(): number;\r\n  /**\r\n   * @type {RefProxy | null} The reference that points to this page.\r\n   */\r\n  get ref(): RefProxy | null;\r\n  /**\r\n   * @type {number} The default size of units in 1/72nds of an inch.\r\n   */\r\n  get userUnit(): number;\r\n  /**\r\n   * @type {Array<number>} An array of the visible portion of the PDF page in\r\n   *   user space units [x1, y1, x2, y2].\r\n   */\r\n  get view(): number[];\r\n  /**\r\n   * @param {GetViewportParameters} params - Viewport parameters.\r\n   * @returns {PageViewport} Contains 'width' and 'height' properties\r\n   *   along with transforms required for rendering.\r\n   */\r\n  getViewport({ scale, rotation, offsetX, offsetY, dontFlip }?: GetViewportParameters): PageViewport;\r\n  /**\r\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\r\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\r\n   *   {Array} of the annotation objects.\r\n   */\r\n  getAnnotations({ intent }?: GetAnnotationsParameters): Promise<Array<any>>;\r\n  /**\r\n   * @returns {Promise<Object>} A promise that is resolved with an\r\n   *   {Object} with JS actions.\r\n   */\r\n  getJSActions(): Promise<Object>;\r\n  /**\r\n   * @type {boolean} True if only XFA form.\r\n   */\r\n  get isPureXfa(): boolean;\r\n  /**\r\n   * @returns {Promise<Object | null>} A promise that is resolved with\r\n   *   an {Object} with a fake DOM object (a tree structure where elements\r\n   *   are {Object} with a name, attributes (class, style, ...), value and\r\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\r\n   */\r\n  getXfa(): Promise<Object | null>;\r\n  /**\r\n   * Begins the process of rendering a page to the desired context.\r\n   *\r\n   * @param {RenderParameters} params - Page render parameters.\r\n   * @returns {RenderTask} An object that contains a promise that is\r\n   *   resolved when the page finishes rendering.\r\n   */\r\n  render({\r\n    canvasContext,\r\n    viewport,\r\n    intent,\r\n    annotationMode,\r\n    transform,\r\n    canvasFactory,\r\n    background,\r\n    backgroundColorToReplace,\r\n    optionalContentConfigPromise,\r\n    annotationCanvasMap,\r\n    pageColors,\r\n    printAnnotationStorage,\r\n  }: RenderParameters): RenderTask;\r\n\r\n  /**\r\n   * NOTE: All occurrences of whitespace will be replaced by\r\n   * standard spaces (0x20).\r\n   *\r\n   * @param {getTextContentParameters} params - getTextContent parameters.\r\n   * @returns {ReadableStream} Stream for reading text content chunks.\r\n   */\r\n  streamTextContent({ disableCombineTextItems, includeMarkedContent }?: getTextContentParameters): ReadableStream;\r\n  /**\r\n   * NOTE: All occurrences of whitespace will be replaced by\r\n   * standard spaces (0x20).\r\n   *\r\n   * @param {getTextContentParameters} params - getTextContent parameters.\r\n   * @returns {Promise<TextContent>} A promise that is resolved with a\r\n   *   {@link TextContent} object that represents the page's text content.\r\n   */\r\n  getTextContent(params?: getTextContentParameters): Promise<TextContent>;\r\n  /**\r\n   * @returns {Promise<StructTreeNode>} A promise that is resolved with a\r\n   *   {@link StructTreeNode} object that represents the page's structure tree,\r\n   *   or `null` when no structure tree is present for the current page.\r\n   */\r\n  getStructTree(): Promise<StructTreeNode>;\r\n  /**\r\n   * Destroys the page object.\r\n   * @private\r\n   */\r\n  _destroy;\r\n  /**\r\n   * Cleans up resources allocated by the page.\r\n   *\r\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\r\n   *   The default value is `false`.\r\n   * @returns {boolean} Indicates if clean-up was successfully run.\r\n   */\r\n  cleanup(resetStats: boolean | undefined): boolean;\r\n  /**\r\n   * Attempts to clean up if rendering is in a state where that's possible.\r\n   * @private\r\n   */\r\n  _tryCleanup;\r\n  /**\r\n   * @private\r\n   */\r\n  _startRenderPage;\r\n  /**\r\n   * @private\r\n   */\r\n  _renderPageChunk;\r\n  /**\r\n   * @private\r\n   */\r\n  _pumpOperatorList;\r\n  /**\r\n   * @private\r\n   */\r\n  _abortOperatorList;\r\n  /**\r\n   * @type {Object} Returns page stats, if enabled; returns `null` otherwise.\r\n   */\r\n  get stats(): Object;\r\n}\r\n\r\n/**\r\n * The loading task controls the operations required to load a PDF document\r\n * (such as network requests) and provides a way to listen for completion,\r\n * after which individual pages can be rendered.\r\n */\r\nexport interface PDFDocumentLoadingTask {\r\n  /**\r\n   * Unique identifier for the document loading task.\r\n   * @type {string}\r\n   */\r\n  docId: string;\r\n  /**\r\n   * Whether the loading task is destroyed or not.\r\n   * @type {boolean}\r\n   */\r\n  destroyed: boolean;\r\n  /**\r\n   * Callback to request a password if a wrong or no password was provided.\r\n   * The callback receives two parameters: a function that should be called\r\n   * with the new password, and a reason (see {@link PasswordResponses}).\r\n   * @type {function}\r\n   */\r\n  onPassword: Function;\r\n  /**\r\n   * Callback to be able to monitor the loading progress of the PDF file\r\n   * (necessary to implement e.g. a loading bar).\r\n   * The callback receives an {@link OnProgressParameters} argument.\r\n   * @type {function}\r\n   */\r\n  onProgress: Function;\r\n  /**\r\n   * Callback for when an unsupported feature is used in the PDF document.\r\n   * The callback receives an {@link UNSUPPORTED_FEATURES} argument.\r\n   * @type {function}\r\n   */\r\n  set onUnsupportedFeature(arg: Function | null);\r\n  /**\r\n   * @type {function | null} The current callback used with unsupported\r\n   * features.\r\n   */\r\n  get onUnsupportedFeature(): Function | null;\r\n  /**\r\n   * Promise for document loading task completion.\r\n   * @type {Promise<PDFDocumentProxy>}\r\n   */\r\n  get promise(): Promise<PDFDocumentProxy>;\r\n  /**\r\n   * Abort all network requests and destroy the worker.\r\n   * @returns {Promise<void>} A promise that is resolved when destruction is\r\n   *   completed.\r\n   */\r\n  destroy(): Promise<void>;\r\n}\r\nexport interface PDFDocumentProxy {\r\n  _pdfInfo: any;\r\n  _transport: any;\r\n  /**\r\n   * @type {AnnotationStorage} Storage for annotation data in forms.\r\n   */\r\n  get annotationStorage(): AnnotationStorage;\r\n  /**\r\n   * @type {number} Total number of pages in the PDF file.\r\n   */\r\n  get numPages(): number;\r\n  /**\r\n   * @type {Array<string, string|null>} A (not guaranteed to be) unique ID to\r\n   *   identify the PDF document.\r\n   *   NOTE: The first element will always be defined for all PDF documents,\r\n   *   whereas the second element is only defined for *modified* PDF documents.\r\n   */\r\n  get fingerprints(): string[];\r\n  /**\r\n   * @type {boolean} True if only XFA form.\r\n   */\r\n  get isPureXfa(): boolean;\r\n  /**\r\n   * NOTE: This is (mostly) intended to support printing of XFA forms.\r\n   *\r\n   * @type {Object | null} An object representing a HTML tree structure\r\n   *   to render the XFA, or `null` when no XFA form exists.\r\n   */\r\n  get allXfaHtml(): Object | null;\r\n  /**\r\n   * @param {number} pageNumber - The page number to get. The first page is 1.\r\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\r\n   *   a {@link PDFPageProxy} object.\r\n   */\r\n  getPage(pageNumber: number): Promise<PDFPageProxy>;\r\n  /**\r\n   * @param {RefProxy} ref - The page reference.\r\n   * @returns {Promise<number>} A promise that is resolved with the page index,\r\n   *   starting from zero, that is associated with the reference.\r\n   */\r\n  getPageIndex(ref: RefProxy): Promise<number>;\r\n  /**\r\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\r\n   *   with a mapping from named destinations to references.\r\n   *\r\n   * This can be slow for large documents. Use `getDestination` instead.\r\n   */\r\n  getDestinations(): Promise<{\r\n    [x: string]: Array<any>;\r\n  }>;\r\n  /**\r\n   * @param {string} id - The named destination to get.\r\n   * @returns {Promise<Array<any> | null>} A promise that is resolved with all\r\n   *   information of the given named destination, or `null` when the named\r\n   *   destination is not present in the PDF file.\r\n   */\r\n  getDestination(id: string): Promise<Array<any> | null>;\r\n  /**\r\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\r\n   *   an {Array} containing the page labels that correspond to the page\r\n   *   indexes, or `null` when no page labels are present in the PDF file.\r\n   */\r\n  getPageLabels(): Promise<Array<string> | null>;\r\n  /**\r\n   * @returns {Promise<string>} A promise that is resolved with a {string}\r\n   *   containing the page layout name.\r\n   */\r\n  getPageLayout(): Promise<string>;\r\n  /**\r\n   * @returns {Promise<string>} A promise that is resolved with a {string}\r\n   *   containing the page mode name.\r\n   */\r\n  getPageMode(): Promise<string>;\r\n  /**\r\n   * @returns {Promise<Object | null>} A promise that is resolved with an\r\n   *   {Object} containing the viewer preferences, or `null` when no viewer\r\n   *   preferences are present in the PDF file.\r\n   */\r\n  getViewerPreferences(): Promise<Object | null>;\r\n  /**\r\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\r\n   *   containing the destination, or `null` when no open action is present\r\n   *   in the PDF.\r\n   */\r\n  getOpenAction(): Promise<any | null>;\r\n  /**\r\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\r\n   *   for mapping named attachments to their content.\r\n   */\r\n  getAttachments(): Promise<any>;\r\n  /**\r\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\r\n   *   an {Array} of all the JavaScript strings in the name tree, or `null`\r\n   *   if no JavaScript exists.\r\n   */\r\n  getJavaScript(): Promise<Array<string> | null>;\r\n  /**\r\n   * @returns {Promise<Object | null>} A promise that is resolved with\r\n   *   an {Object} with the JavaScript actions:\r\n   *     - from the name tree (like getJavaScript);\r\n   *     - from A or AA entries in the catalog dictionary.\r\n   *   , or `null` if no JavaScript exists.\r\n   */\r\n  getJSActions(): Promise<Object | null>;\r\n  /**\r\n   * @typedef {Object} OutlineNode\r\n   * @property {string} title\r\n   * @property {boolean} bold\r\n   * @property {boolean} italic\r\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\r\n   *   display purposes.\r\n   * @property {string | Array<any> | null} dest\r\n   * @property {string | null} url\r\n   * @property {string | undefined} unsafeUrl\r\n   * @property {boolean | undefined} newWindow\r\n   * @property {number | undefined} count\r\n   * @property {Array<OutlineNode>} items\r\n   */\r\n  /**\r\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\r\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\r\n   */\r\n  getOutline(): Promise<\r\n    {\r\n      title: string;\r\n      bold: boolean;\r\n      italic: boolean;\r\n      /**\r\n       * - The color in RGB format to use for\r\n       * display purposes.\r\n       */\r\n      color: Uint8ClampedArray;\r\n      dest: string | Array<any> | null;\r\n      url: string | null;\r\n      unsafeUrl: string | undefined;\r\n      newWindow: boolean | undefined;\r\n      count: number | undefined;\r\n      items: any[];\r\n    }[]\r\n  >;\r\n  /**\r\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\r\n   *   an {@link OptionalContentConfig} that contains all the optional content\r\n   *   groups (assuming that the document has any).\r\n   */\r\n  getOptionalContentConfig(): Promise<OptionalContentConfig>;\r\n  /**\r\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\r\n   *   an {Array} that contains the permission flags for the PDF document, or\r\n   *   `null` when no permissions are present in the PDF file.\r\n   */\r\n  getPermissions(): Promise<Array<number> | null>;\r\n  /**\r\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\r\n   *   resolved with an {Object} that has `info` and `metadata` properties.\r\n   *   `info` is an {Object} filled with anything available in the information\r\n   *   dictionary and similarly `metadata` is a {Metadata} object with\r\n   *   information from the metadata section of the PDF.\r\n   */\r\n  getMetadata(): Promise<{\r\n    info: Object;\r\n    metadata: Metadata;\r\n  }>;\r\n  /**\r\n   * @typedef {Object} MarkInfo\r\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\r\n   * @property {boolean} Marked\r\n   * @property {boolean} UserProperties\r\n   * @property {boolean} Suspects\r\n   */\r\n  /**\r\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\r\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\r\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\r\n   */\r\n  getMarkInfo(): Promise<{\r\n    Marked: boolean;\r\n    UserProperties: boolean;\r\n    Suspects: boolean;\r\n  } | null>;\r\n  /**\r\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\r\n   *   {Uint8Array} containing the raw data of the PDF document.\r\n   */\r\n  getData(): Promise<Uint8Array>;\r\n  /**\r\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\r\n   *   {Uint8Array} containing the full data of the saved document.\r\n   */\r\n  saveDocument(): Promise<Uint8Array>;\r\n  /**\r\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\r\n   *   document's data is loaded. It is resolved with an {Object} that contains\r\n   *   the `length` property that indicates size of the PDF data in bytes.\r\n   */\r\n  getDownloadInfo(): Promise<{\r\n    length: number;\r\n  }>;\r\n  /**\r\n   * Cleans up resources allocated by the document on both the main and worker\r\n   * threads.\r\n   *\r\n   * NOTE: Do not, under any circumstances, call this method when rendering is\r\n   * currently ongoing since that may lead to rendering errors.\r\n   *\r\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\r\n   *   NOTE: This will increase persistent memory usage, hence don't use this\r\n   *   option unless absolutely necessary. The default value is `false`.\r\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\r\n   */\r\n  cleanup(keepLoadedFonts: boolean | undefined): Promise<any>;\r\n  /**\r\n   * Destroys the current document instance and terminates the worker.\r\n   */\r\n  destroy(): Promise<void>;\r\n  /**\r\n   * @type {DocumentInitParameters} A subset of the current\r\n   *   {DocumentInitParameters}, which are needed in the viewer.\r\n   */\r\n  get loadingParams(): DocumentInitParameters;\r\n  /**\r\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\r\n   */\r\n  get loadingTask(): PDFDocumentLoadingTask;\r\n  /**\r\n   * @returns {Promise<Object<string, Array<Object>> | null>} A promise that is\r\n   *   resolved with an {Object} containing /AcroForm field data for the JS\r\n   *   sandbox, or `null` when no field data is present in the PDF file.\r\n   */\r\n  getFieldObjects(): Promise<{\r\n    [x: string]: Array<Object>;\r\n  } | null>;\r\n  /**\r\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\r\n   *   if some /AcroForm fields have JavaScript actions.\r\n   */\r\n  hasJSActions(): Promise<boolean>;\r\n  /**\r\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\r\n   *   {Array<string>} containing IDs of annotations that have a calculation\r\n   *   action, or `null` when no such annotations are present in the PDF file.\r\n   */\r\n  getCalculationOrderIds(): Promise<Array<string> | null>;\r\n}\r\n\r\nexport interface IPDFViewerApplication {\r\n  pdfThumbnailViewer: any;\r\n  pdfDocumentProperties: any;\r\n  appConfig: IPDFViewerAppConfig;\r\n  _boundEvents: any;\r\n  enablePrint: boolean;\r\n  eventBus: IEventBus;\r\n  findBar: any;\r\n  findController: FindController;\r\n  isViewerEmbedded: boolean;\r\n  l10n: IWebL10n;\r\n  onError: (error: Error) => void;\r\n  page: number;\r\n  pagesCount: number;\r\n  passwordPrompt: PasswordPrompt;\r\n  pdfDocument: PDFDocumentProxy;\r\n  pdfLinkService: any /* PDFLinkService;*/;\r\n  pdfSidebar: any;\r\n  pdfViewer: IPDFViewer;\r\n  printKeyDownListener: undefined | ((this: Window, ev: KeyboardEvent) => any);\r\n  sidebarViewOnLoad: 0 | 1;\r\n  spreadModeOnLoad: 0 | 1 | 2;\r\n  secondaryToolbar: any;\r\n  store: ViewHistory;\r\n  toolbar: any;\r\n  viewer: HTMLDivElement;\r\n\r\n  _cleanup(): void;\r\n  close(): Promise<void>;\r\n  open(source: string | ArrayBuffer | { range: any } | any, options?: any): Promise<any>;\r\n  unbindEvents(): void;\r\n  unbindWindowEvents(): void;\r\n  export(): Promise<Blob>;\r\n}\r\n"]}