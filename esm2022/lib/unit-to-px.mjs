export class UnitToPx {
    // cache this.con, el for reused
    static con = undefined;
    static el = undefined;
    // high sample will more accurate?
    static sample = 100;
    static pxPerUnitCache = {};
    static initElements() {
        if (!document) {
            return;
        }
        if (!this.con || !this.el) {
            this.con = document.createElement('div');
            this.el = document.createElement('div');
        }
        this.con.style.position = 'absolute';
        this.con.style.width = '0';
        this.con.style.height = '0';
        this.con.style.visibility = 'hidden';
        this.con.style.overflow = 'hidden';
        this.con.appendChild(this.el);
    }
    static pxPerUnit(unit) {
        if (!this.pxPerUnitCache[unit]) {
            if (!this.con || !this.el) {
                this.initElements();
            }
            if (!this.con || !this.el) {
                // dummy implementation for server-side rendering
                return 1;
            }
            this.el.style.width = this.sample + unit;
            document.body.appendChild(this.con);
            const dimension = this.el.getBoundingClientRect();
            this.con.parentNode.removeChild(this.con);
            this.pxPerUnitCache[unit] = dimension.width / this.sample;
        }
        return this.pxPerUnitCache[unit];
    }
    static toPx(length) {
        const unitRe = /^\s*([+-]?[\d\.]*)\s*(.*)\s*$/i; // NOSONAR
        const match = unitRe.exec(length);
        if (match != null && match.length > 2) {
            const bare = match[1] === '';
            const val = bare ? 1 : Number(match[1]);
            const unit = match[2];
            const valid = !isNaN(val) && unit;
            if (valid) {
                return unit === 'px' ? val : this.pxPerUnit(unit) * val;
            }
        }
        throw new TypeError('Error parsing length');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC10by1weC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1leHRlbmRlZC1wZGYtdmlld2VyL3NyYy9saWIvdW5pdC10by1weC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sUUFBUTtJQUNuQixnQ0FBZ0M7SUFDeEIsTUFBTSxDQUFDLEdBQUcsR0FBK0IsU0FBUyxDQUFDO0lBQ25ELE1BQU0sQ0FBQyxFQUFFLEdBQStCLFNBQVMsQ0FBQztJQUUxRCxrQ0FBa0M7SUFDMUIsTUFBTSxDQUFVLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFFN0IsTUFBTSxDQUFDLGNBQWMsR0FBOEIsRUFBRSxDQUFDO0lBRXRELE1BQU0sQ0FBQyxZQUFZO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDekIsSUFBSSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBWTtRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzthQUNyQjtZQUNELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDekIsaURBQWlEO2dCQUNqRCxPQUFPLENBQUMsQ0FBQzthQUNWO1lBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ3pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFDbEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUMzRDtRQUNELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLGdDQUFnQyxDQUFDLENBQUMsVUFBVTtRQUMzRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyQyxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzdCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQztZQUNsQyxJQUFJLEtBQUssRUFBRTtnQkFDVCxPQUFPLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7YUFDekQ7U0FDRjtRQUNELE1BQU0sSUFBSSxTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFVuaXRUb1B4IHtcclxuICAvLyBjYWNoZSB0aGlzLmNvbiwgZWwgZm9yIHJldXNlZFxyXG4gIHByaXZhdGUgc3RhdGljIGNvbjogSFRNTERpdkVsZW1lbnQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgZWw6IEhUTUxEaXZFbGVtZW50IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAvLyBoaWdoIHNhbXBsZSB3aWxsIG1vcmUgYWNjdXJhdGU/XHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgc2FtcGxlID0gMTAwO1xyXG5cclxuICBwcml2YXRlIHN0YXRpYyBweFBlclVuaXRDYWNoZTogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xyXG5cclxuICBwcml2YXRlIHN0YXRpYyBpbml0RWxlbWVudHMoKTogdm9pZCB7XHJcbiAgICBpZiAoIWRvY3VtZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghdGhpcy5jb24gfHwgIXRoaXMuZWwpIHtcclxuICAgICAgdGhpcy5jb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGhpcy5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jb24uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgdGhpcy5jb24uc3R5bGUud2lkdGggPSAnMCc7XHJcbiAgICB0aGlzLmNvbi5zdHlsZS5oZWlnaHQgPSAnMCc7XHJcbiAgICB0aGlzLmNvbi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICB0aGlzLmNvbi5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG4gICAgdGhpcy5jb24uYXBwZW5kQ2hpbGQodGhpcy5lbCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBweFBlclVuaXQodW5pdDogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGlmICghdGhpcy5weFBlclVuaXRDYWNoZVt1bml0XSkge1xyXG4gICAgICBpZiAoIXRoaXMuY29uIHx8ICF0aGlzLmVsKSB7XHJcbiAgICAgICAgdGhpcy5pbml0RWxlbWVudHMoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIXRoaXMuY29uIHx8ICF0aGlzLmVsKSB7XHJcbiAgICAgICAgLy8gZHVtbXkgaW1wbGVtZW50YXRpb24gZm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZ1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZWwuc3R5bGUud2lkdGggPSB0aGlzLnNhbXBsZSArIHVuaXQ7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jb24pO1xyXG4gICAgICBjb25zdCBkaW1lbnNpb24gPSB0aGlzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICB0aGlzLmNvbi5wYXJlbnROb2RlIS5yZW1vdmVDaGlsZCh0aGlzLmNvbik7XHJcbiAgICAgIHRoaXMucHhQZXJVbml0Q2FjaGVbdW5pdF0gPSBkaW1lbnNpb24ud2lkdGggLyB0aGlzLnNhbXBsZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnB4UGVyVW5pdENhY2hlW3VuaXRdO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyB0b1B4KGxlbmd0aCk6IG51bWJlciB7XHJcbiAgICBjb25zdCB1bml0UmUgPSAvXlxccyooWystXT9bXFxkXFwuXSopXFxzKiguKilcXHMqJC9pOyAvLyBOT1NPTkFSXHJcbiAgICBjb25zdCBtYXRjaCA9IHVuaXRSZS5leGVjKGxlbmd0aCk7XHJcbiAgICBpZiAobWF0Y2ggIT0gbnVsbCAmJiBtYXRjaC5sZW5ndGggPiAyKSB7XHJcbiAgICAgIGNvbnN0IGJhcmUgPSBtYXRjaFsxXSA9PT0gJyc7XHJcbiAgICAgIGNvbnN0IHZhbCA9IGJhcmUgPyAxIDogTnVtYmVyKG1hdGNoWzFdKTtcclxuICAgICAgY29uc3QgdW5pdCA9IG1hdGNoWzJdO1xyXG4gICAgICBjb25zdCB2YWxpZCA9ICFpc05hTih2YWwpICYmIHVuaXQ7XHJcbiAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgIHJldHVybiB1bml0ID09PSAncHgnID8gdmFsIDogdGhpcy5weFBlclVuaXQodW5pdCkgKiB2YWw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Vycm9yIHBhcnNpbmcgbGVuZ3RoJyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==